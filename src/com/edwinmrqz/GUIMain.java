/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edwinmrqz;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author edwin
 */
public class GUIMain extends javax.swing.JFrame {

    /**
     * Creates new form GUIMain
     */
    public static final boolean DEBUG = true;

    private loadFile lf = null;
    private Highlighter txt_ascii_highlighter;
    private Highlighter txt_hexa_highlighter;
    private Object ascii_highlight_ref;
    private Object hex_highlight_ref;
    private Highlighter.HighlightPainter txt_ascii_h_paint;
    private Highlighter.HighlightPainter txt_hexa_h_paint;
    
    

    public GUIMain() {
        initComponents();
//        txt_hexa.setLineWrap(true);
//        txt_ascii.setLineWrap(true);
        txt_ascii_highlighter = txt_ascii.getHighlighter();
        txt_ascii_h_paint = new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE);
        
        txt_hexa_highlighter = txt_ascii.getHighlighter();
        txt_hexa_h_paint = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
        
        try {
            ascii_highlight_ref = txt_ascii_highlighter.addHighlight(0, 0, txt_ascii_h_paint);
            txt_hexa_highlighter.addHighlight(0, 0, txt_hexa_h_paint);
        } catch (BadLocationException ex) {
            if(DEBUG)System.out.println("error setting the highlighter on initial set up");
        }

        txt_hexa.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {}

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {
                if(DEBUG)System.out.println("mouse released at: " + txt_hexa.getSelectionStart());
                int positionOnText = txt_hexa.getSelectionStart();
                if(positionOnText % 4 > 2){
                    return;
                }else{
                    positionOnText -= positionOnText % 4;
                }
                
                try {
                    txt_ascii_highlighter.changeHighlight(ascii_highlight_ref,positionOnText, positionOnText+ 1);
                } catch (BadLocationException ex) {
                    if(DEBUG)System.out.println("error setting the position for the ascii highlighter");
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        });

        menu_file_open.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                txt_hexa.setText("");
                txt_ascii.setText("");
                fileChooser = new JFileChooser();
                int returnValue = fileChooser.showOpenDialog(rootPane);
                if (DEBUG) {
                    System.out.println("file -- > open with file chooser option: " + returnValue);
                }

                if (returnValue == JFileChooser.APPROVE_OPTION) {

                    //user decided for one file, "dont freeze the GUI"
                    lf = new loadFile();
                    lf.execute();

                } else {
                    //operation cancelled by the user
                }
            }
        });

        btn_cancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (DEBUG) {
                    System.out.println("Canceling the application");
                }
                if (lf != null) {
                    lf.cancel(true);
                    lf = null;
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        split_panel = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_hexa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_ascii = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        btn_cancel = new javax.swing.JButton();
        menu_bar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menu_file_open = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hexbi");

        split_panel.setToolTipText("");

        txt_hexa.setColumns(20);
        txt_hexa.setRows(5);
        jScrollPane1.setViewportView(txt_hexa);

        split_panel.setLeftComponent(jScrollPane1);

        txt_ascii.setColumns(20);
        txt_ascii.setRows(5);
        jScrollPane2.setViewportView(txt_ascii);

        split_panel.setRightComponent(jScrollPane2);

        progressBar.setToolTipText("File Loading progress");
        progressBar.setStringPainted(true);

        btn_cancel.setText("cancel");

        menu_file.setText("File");

        menu_file_open.setText("Open");
        menu_file_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_file_openActionPerformed(evt);
            }
        });
        menu_file.add(menu_file_open);

        menu_bar.add(menu_file);

        menu_edit.setText("Edit");
        menu_bar.add(menu_edit);

        setJMenuBar(menu_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(split_panel)
            .addGroup(layout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cancel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(split_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_file_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_file_openActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menu_file_openActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenuItem menu_file_open;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JSplitPane split_panel;
    private javax.swing.JTextArea txt_ascii;
    private javax.swing.JTextArea txt_hexa;
    // End of variables declaration//GEN-END:variables

    public class loadFile extends SwingWorker<StringBuilder[], Integer> {

        StringBuilder[] result = new StringBuilder[2];

        @Override
        protected StringBuilder[] doInBackground() throws Exception {
            result[0] = new StringBuilder();
            result[1] = new StringBuilder();
            File file = fileChooser.getSelectedFile();
            DataInputStream data_input = null;
            try {
                data_input = new DataInputStream(
                        new BufferedInputStream(new FileInputStream(file))
                );
            } catch (FileNotFoundException e) {
                data_input = null;
                if (DEBUG) {
                    System.out.println("File was not found");
                }
            }
            if (data_input != null) {

                try {
                    int totalBytes = data_input.available();
                    int completed = 0;
                    for (int i = 0; i < totalBytes; i++) {

                        int data = data_input.readUnsignedByte();
                        String hexVal = Integer.toHexString(data);

                        if(hexVal.length() == 1){
                            result[0].append(0); 
                            hexVal = "0"+hexVal;
                        }
                        result[0].append(Integer.toHexString(data));
                        txt_hexa.append(hexVal);
                        txt_hexa.append("  ");

                        char character = (char) data;
                        if (character < 32 || character > 126) {
                            character = '.';
                        }
                        result[1].append(character);
                        txt_ascii.append(String.valueOf(character));
                        txt_ascii.append("   ");

                        completed = i * 100 / totalBytes;
                        publish(completed);

                        if (isCancelled()) {
                            break;
                        }

                    }
                } catch (IOException ex) {
                    // no data to read
                    if (DEBUG) {
                        System.out.println("IOException " + ex.getMessage());
                    }

                }

            }
            return result;
        }

        @Override
        protected void done() {
            //completed loading the file ----- use this :v
//            txt_hexa.setText(result[0].toString());
//            txt_ascii.setText(result[1].toString());
            if (DEBUG) {
                System.out.println("Finished the execution");
            }

        }

        @Override
        protected void process(List<Integer> chunks) {
            super.process(chunks); //To change body of generated methods, choose Tools | Templates.
            progressBar.setValue(chunks.get(chunks.size() - 1));
        }
    }

}
